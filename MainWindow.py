# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Main.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtMultimedia import QMediaPlayer
from Controllers.AudioPlayer import AudioPlayer as player
from Controllers.Tools import Tools as tools
from Controllers.ProgressBar import ProgressBar
from functools import partial
import threading


class Ui_MainWindow(object):
    playOrPausedIcon = ['||', 'â–º']
    selected_song = ''
    currentSound = None
    soundProgress = None
    barIsSelected = False
    paused = False
    repeat = False
    songs = []

    def showSongs(self):
        for song in self.songs:
            label = QtWidgets.QLabel(song)
            label.mousePressEvent = partial(self.selected_item, song)
            label.enterEvent = partial(self.onMouseOver, "song", label)
            label.leaveEvent = partial(self.onMouseLeave, "song", label)
            label.setStyleSheet("margin-left: 4px; border: none; color: #000000")
            label.setCursor(QtCore.Qt.PointingHandCursor)
            self.verticalLayout.addWidget(label)

    def nextSong(self, actualSongIndex):
        try:
            _next = self.songs[actualSongIndex + 1]
        except:
            return

        self.selected_item(_next, None)

    def selected_item(self, text, event):
        self.selected_song = text

        if self.currentSound == None:
            self.currentSound = player(self.selected_song)
        else:
            self.currentSound.stop(self.currentSound)
            self.currentSound = player(self.selected_song)
        
        if self.soundProgress is not None:
            self.soundProgress.quit = [True, 'changed']

        self.configPlayer()
        self.soundUnReady()

    def configPlayer(self):
        self.soundProgress = ProgressBar()
        self.soundProgress.player = self.currentSound.player
        self.soundProgress.mode = 'repeat' if self.repeat else 'toNext'
        self.soundProgress.threadSignal.connect(self.updateProgressBar)
        self.soundProgress.setDurationSignal.connect(self.soundReady)
        self.soundProgress.finishedSignal.connect(self.songFinished)
        self.soundProgress.start()
        self.soundProgress.exec()

    def start(self):
        self.currentSound.play(self.currentSound)
        self.pushButton.setText(self.playOrPausedIcon[0])

    def pauseOrPlay(self):
        if self.currentSound.player.state() == QMediaPlayer.PlayingState:
            self.currentSound.pause(self.currentSound)
            self.pushButton.setText(self.playOrPausedIcon[1])
        else:
            self.currentSound.play(self.currentSound)
            self.pushButton.setText(self.playOrPausedIcon[0])

    def songFinished(self, typeFinish):
        self.pushButton.setText(self.playOrPausedIcon[1])
        self.currentSound.player.setPosition(0)
        self.horizontalSlider.setValue(0)
        self.currentSound.stop(self.currentSound)

        print(typeFinish)
        if typeFinish == 'toNext':
            self.nextSong(self.songs.index(self.selected_song))
        elif typeFinish == 'repeat':
            self.selected_item(self.selected_song, None)

    def updateProgressBar(self, value):
        if not self.barIsSelected:
            self.horizontalSlider.setValue(value)

    def soundReady(self, _time):
        self.pushButton.setEnabled(True)
        self.horizontalSlider.setEnabled(True)
        self.loopIcon.setEnabled(True)

        self.label_2.setText(tools.numberToTime(_time))
        self.soundProgress.duration = _time
        self.horizontalSlider.setMaximum(_time)
        self.pushButton.setText(self.playOrPausedIcon[1])
        self.label.setText(self.selected_song)
        self.horizontalSlider.setValue(0)

        self.start()

    def soundUnReady(self):
        self.pushButton.setEnabled(False)
        self.horizontalSlider.setEnabled(False)
        self.loopIcon.setEnabled(False)

        self.label_2.setText('00:00')
        self.soundProgress.duration = 1
        self.horizontalSlider.setMaximum(1)
        self.pushButton.setText(self.playOrPausedIcon[1])
        self.label.setText('')
        self.horizontalSlider.setValue(0)

    def onMouseOver(self, name, elem, event):
        if name == "song":
            elem.setStyleSheet("margin-left: 4px; border: none; color: #0000FF")
        elif name == "loopIcon":
            elem.setStyleSheet("border: none; color: #0000FF")

    def onMouseLeave(self, name, elem, event):
        if name == "song":
            elem.setStyleSheet("margin-left: 4px; border: none; color: #000000")
        elif name == "loopIcon":
            if not self.repeat:
                elem.setStyleSheet("border: none; color: #000000")

    def onMousePress(self, name, elem, event):
        if name == "loopIcon":
            self.repeat = True if not self.repeat else False
            try:
                self.soundProgress.mode = 'repeat' if self.repeat else 'toNext'
            except:
                pass
    
    def onPressBar(self):
        self.barIsSelected = True

    def onDragBar(self, pos):
        self.barIsSelected = True
        self.soundProgress.setPlayerPosition(pos)

    def onLeaveBar(self):
        self.barIsSelected = False

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1024, 700)
        MainWindow.setFixedSize(1024, 700)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.scrollArea = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollArea.setGeometry(QtCore.QRect(10, 10, 251, 591))
        self.scrollArea.setStyleSheet("background-color: #FFFFFF; border: 4px ridge black")
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 249, 589))
        self.scrollAreaWidgetContents.setStyleSheet("background-color: #FFFFFF; border: none")
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.scrollAreaWidgetContents)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(0, 0, 251, 591))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.verticalLayout.setAlignment(QtCore.Qt.AlignTop)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(290, 330, 561, 271))
        self.widget.setStyleSheet("background-color: #FFFFFF; border: 4px ridge black")
        self.widget.setObjectName("widget")
        self.label_2 = QtWidgets.QLabel(self.widget)
        self.label_2.setGeometry(QtCore.QRect(510, 110, 31, 16))
        self.label_2.setObjectName("label_2")
        self.label_2.setStyleSheet("border: none")
        self.pushButton = QtWidgets.QPushButton(self.widget)
        self.pushButton.setEnabled(False)
        self.pushButton.setGeometry(QtCore.QRect(220, 180, 111, 81))
        self.pushButton.setStyleSheet("border: none")
        font = QtGui.QFont()
        font.setPointSize(16)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("border: 1px solid;\n"
"border-radius: 10px;")
        self.pushButton.clicked.connect(self.pauseOrPlay)
        self.pushButton.setObjectName("pushButton")
        self.label = QtWidgets.QLabel(self.widget)
        self.label.setGeometry(QtCore.QRect(10, 40, 531, 51))
        self.label.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label.setStyleSheet("color: rgb(150, 74, 255);\n"
"font: 87 11pt \"Arial Black\"; border: none")
        self.label.setTextFormat(QtCore.Qt.AutoText)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.horizontalSlider = QtWidgets.QSlider(self.widget)
        self.horizontalSlider.setEnabled(False)
        self.horizontalSlider.setGeometry(QtCore.QRect(10, 110, 491, 22))
        self.horizontalSlider.setMaximum(100)
        self.horizontalSlider.setProperty("value", 0)
        self.horizontalSlider.setStyleSheet("border: none")
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.horizontalSlider.sliderPressed.connect(self.onPressBar)
        self.horizontalSlider.sliderMoved.connect(self.onDragBar)
        self.horizontalSlider.sliderReleased.connect(self.onLeaveBar)
        self.loopIcon = QtWidgets.QLabel(self.widget)
        self.loopIcon.setGeometry(QtCore.QRect(510, 150, 31, 20))
        self.loopIcon.setObjectName("loopIcon")
        self.loopIcon.setStyleSheet("border: none; color: #000000")
        self.loopIcon.enterEvent = partial(self.onMouseOver, 'loopIcon', self.loopIcon)
        self.loopIcon.leaveEvent = partial(self.onMouseLeave, 'loopIcon', self.loopIcon)
        self.loopIcon.mousePressEvent = partial(self.onMousePress, 'loopIcon', self.loopIcon)
        self.loopIcon.setFont(QtGui.QFont('Arial', 15))
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)


        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.songs = tools.getSongs()

        self.showSongs() 

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_2.setText(_translate("MainWindow", "00:00"))
        self.loopIcon.setText(_translate("MainWindow", "âŸ²"))
        self.pushButton.setText(_translate("MainWindow", "â–º"))
        self.label.setText(_translate("MainWindow", "Nothing selected"))
